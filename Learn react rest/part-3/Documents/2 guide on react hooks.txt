--------------------------------------------------------------------------------
SEE:

Detailed Guide on React Hooks

Introduction to React Hooks
React Hooks are functions that let you "hook into" React state and lifecycle features in function components. Hooks eliminate the need for class components by allowing function components to handle state and side effects.

Why Use Hooks?
- No need for class components
- Improved readability and maintainability
- Encourages reusable logic
- Simplifies state and side-effect management

List of React Hooks & Their Use Cases
1. `useState` - Managing State in Function Components
Manages local state in a functional component.

Example:
```
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```
Use Case: Storing and updating local component data.

---

2. `useEffect` - Handling Side Effects
Used for handling side effects like fetching data, DOM manipulations, or event listeners.

Example:
```
import React, { useState, useEffect } from 'react';

function Timer() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCount((prev) => prev + 1);
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  return <p>Timer: {count}</p>;
}
```
Use Case: Running effects when components mount, update, or unmount.

---

3. `useContext` - Managing Global State
Accesses values from Reactâ€™s Context API without prop drilling.

Example:
```
import React, { createContext, useContext } from 'react';

const ThemeContext = createContext('light');

function ThemedComponent() {
  const theme = useContext(ThemeContext);
  return <p>Current Theme: {theme}</p>;
}
```
Use Case: Sharing global data across components (e.g., themes, authentication).

---

4. `useRef` - Accessing DOM Elements and Persisting Values
Creates a reference to a DOM element or persists values across renders without causing re-renders.

Example:
```
import React, { useRef } from 'react';

function FocusInput() {
  const inputRef = useRef(null);
  return (
    <div>
      <input ref={inputRef} type="text" />
      <button onClick={() => inputRef.current.focus()}>Focus Input</button>
    </div>
  );
}
```
Use Case: Managing focus, animations, measuring DOM elements.

---

5. `useReducer` - Advanced State Management
An alternative to `useState` for complex state logic.

Example:
```
import React, { useReducer } from 'react';

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });
  return (
    <div>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}
```
Use Case: Managing complex state logic, like in Redux-like patterns.

---

6. `useMemo` - Performance Optimization
Memoizes computed values to avoid unnecessary recalculations.

Example:
```
import React, { useState, useMemo } from 'react';

function ExpensiveCalculation({ num }) {
  const result = useMemo(() => {
    console.log("Computing...");
    return num * 2;
  }, [num]);
  return <p>Computed Value: {result}</p>;
}
```
Use Case: Preventing unnecessary calculations in performance-critical apps.

---

7. `useCallback` - Optimizing Function References
Returns a memoized version of a function to prevent re-renders.

Example:
```
import React, { useState, useCallback } from 'react';

function Button({ handleClick }) {
  return <button onClick={handleClick}>Click Me</button>;
}

function Parent() {
  const [count, setCount] = useState(0);
  const memoizedCallback = useCallback(() => setCount(count + 1), [count]);
  return <Button handleClick={memoizedCallback} />;
}
```
Use Case: Optimizing functions in child components to avoid unnecessary re-renders.

---

New Hooks in React 19 (Expected)
React 19 is introducing new hooks, such as:
- `useOptimistic` - Handles optimistic UI updates.
- `useTransition` - Improves concurrent UI updates.

Example: `useTransition`
```
import React, { useState, useTransition } from 'react';

function List() {
  const [isPending, startTransition] = useTransition();
  const [items, setItems] = useState([]);

  function handleClick() {
    startTransition(() => {
      setItems(Array.from({ length: 5000 }, (_, i) => `Item ${i}`));
    });
  }

  return (
    <div>
      <button onClick={handleClick}>Load Items</button>
      {isPending ? <p>Loading...</p> : items.map(item => <p key={item}>{item}</p>)}
    </div>
  );
}
```

Conclusion
React Hooks make functional components powerful by handling state, side effects, and performance optimizations. Understanding and using them effectively will enhance React application development. ðŸš€