--------------------------------------------------------------------------------
SEE:

Detailed Guide on useState Hook in React:

Introduction to useState:
`useState` is a React Hook that allows you to add state management to functional components. It helps store and update values dynamically, triggering UI re-renders when the state changes.

Syntax:
```
const [state, setState] = useState(initialValue);
```
- `state` – The current state value.
- `setState` – Function used to update the state.
- `initialValue` – The default value of the state.

Basic Example
```
import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}

export default Counter;
```
Explanation:
1. The `count` state is initialized with `0`.
2. The `setCount` function updates the state when the button is clicked.
3. React automatically re-renders the component when `count` changes.

Handling Objects in useState
You can store objects in state and update specific properties.

```
import React, { useState } from "react";

function UserProfile() {
  const [user, setUser] = useState({ name: "John", age: 25 });

  const updateAge = () => {
    setUser({ ...user, age: user.age + 1 });
  };

  return (
    <div>
      <p>Name: {user.name}</p>
      <p>Age: {user.age}</p>
      <button onClick={updateAge}>Increase Age</button>
    </div>
  );
}

export default UserProfile;
```
Explanation:
- The `user` state holds an object with `name` and `age`.
- The `setUser` function updates only the `age` property while preserving `name` using the spread operator (`...user`).

Handling Arrays in useState
To update an array in state, always return a new array instead of modifying the existing one.

```
import React, { useState } from "react";

function TodoList() {
  const [todos, setTodos] = useState(["Buy Milk", "Go to Gym"]);

  const addTodo = () => {
    setTodos([...todos, "New Task"]);
  };

  return (
    <div>
      <ul>
        {todos.map((todo, index) => (
          <li key={index}>{todo}</li>
        ))}
      </ul>
      <button onClick={addTodo}>Add Todo</button>
    </div>
  );
}

export default TodoList;
```
Explanation:
- The `todos` array holds a list of tasks.
- `setTodos([...todos, "New Task"])` creates a new array with the previous todos and the new task.

Functional Updates
If your new state depends on the previous state, use the functional update pattern.

```
setCount(prevCount => prevCount + 1);
```
Example:
```
import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>Count: {count}</p>
      <button onClick={() => setCount(prevCount => prevCount + 1)}>Increment</button>
    </div>
  );
}

export default Counter;
```
Why Use Functional Updates?
- Ensures the latest state value is used, avoiding stale state issues.
- Useful in cases where multiple updates happen in a short time.

Lazy Initialization
If the initial state requires computation, you can pass a function to `useState`.

```
const [expensiveValue, setExpensiveValue] = useState(() => {
  return computeExpensiveValue();
});
```
This function is only executed once, improving performance.

Common Mistakes to Avoid
❌ Directly modifying state:
```
state.value = "new value"; // ❌ Wrong
```
✅ Always use `setState`:
```
setState("new value"); // ✅ Correct
```

❌ Using old state without functional updates:
```
setCount(count + 1); // ❌ Might cause stale state issues
```
✅ Use functional updates for safety:
```
setCount(prevCount => prevCount + 1); // ✅ Recommended
```

Conclusion
- `useState` is essential for managing local state in functional components.
- Always update state using the setter function.
- Use objects and arrays carefully, creating new copies instead of modifying existing ones.
- Functional updates prevent stale state issues.

Understanding these concepts will help you write efficient React applications! 🚀