--------------------------------------------------------------------------------
SEE:

Conditional Rendering Using Ternary Operator in React:

In React, conditional rendering allows us to dynamically control what gets displayed based on certain conditions. The ternary operator (`condition ? true_case : false_case`) is one of the most common ways to handle conditionals in .

--------------------------------------------------------------------------------

1Ô∏è‚É£ Basic Ternary Operator Syntax
```
condition ? expression_if_true : expression_if_false;
```

--------------------------------------------------------------------------------

2Ô∏è‚É£ Different Ways to Use Ternary Operators in React

‚úÖ Example 1: Inline Conditional Rendering (Short Text Output)
```
function Greeting({ isLoggedIn }) {
  return <h1>{isLoggedIn ? "Welcome Back!" : "Please Log In"}</h1>;
}
```
- If `isLoggedIn` is `true` ‚Üí Displays "Welcome Back!"
- If `isLoggedIn` is `false` ‚Üí Displays "Please Log In"

--------------------------------------------------------------------------------

‚úÖ Example 2: Rendering Different Components
```
function UserStatus({ isLoggedIn }) {
  return (
    <div>
      {isLoggedIn ? <Dashboard /> : <LoginForm />}
    </div>
  );
}
```
- If `isLoggedIn` is `true`, the `<Dashboard />` component is rendered.
- Otherwise, the `<LoginForm />` component is rendered.

--------------------------------------------------------------------------------

‚úÖ Example 3: Ternary Operator Inside  (Button Toggle)
```
function ToggleButton({ isDarkMode }) {
  return (
    <button className={isDarkMode ? "dark-btn" : "light-btn"}>
      {isDarkMode ? "Switch to Light Mode" : "Switch to Dark Mode"}
    </button>
  );
}
```
- Toggles button text and className based on `isDarkMode`.

--------------------------------------------------------------------------------

‚úÖ Example 4: Assigning to a Variable Before Returning 
```
function UserMessage({ isSubscribed }) {
  const message = isSubscribed ? "Thank you for subscribing!" : "Please subscribe to our newsletter.";
  return <p>{message}</p>;
}
```
- This method improves readability and prevents  clutter.

--------------------------------------------------------------------------------

‚úÖ Example 5: Hiding Elements Instead of Rendering an Alternative
```
function Notification({ hasNewMessages }) {
  return (
    <div>
      {hasNewMessages ? <span>You have new messages!</span> : null}
    </div>
  );
}
```
- If `hasNewMessages` is `true`, a message is shown.
- If `false`, nothing is rendered (`null` removes the element from the DOM).

--------------------------------------------------------------------------------

3Ô∏è‚É£ Alternative: Using `&&` for Short Conditional Rendering
If there's no `else` case, we can use `&&` instead of the ternary operator.
```
function Notification({ hasNewMessages }) {
  return <>{hasNewMessages && <span>You have new messages!</span>}</>;
}
```
- If `hasNewMessages` is `true`, the message is shown.
- If `false`, nothing is rendered.

--------------------------------------------------------------------------------

4Ô∏è‚É£ Key Takeaways
‚úî Ternary operators are useful for conditional rendering in React.  
‚úî Use them to toggle text, classes, components, and elements dynamically.  
‚úî For cases where there‚Äôs no `else`, use `&&` instead of a ternary operator.  
‚úî Store complex conditions in a variable before returning  for better readability.  

Mastering ternary operators makes React components more dynamic and interactive! üöÄ