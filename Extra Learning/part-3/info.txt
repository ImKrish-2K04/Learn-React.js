üìÅ part-3 Directory ‚Äì Context API Practice

This `part-3` directory is a practice project based on the `useContext` hook in React.

---

üîç Objective:
To understand how to:
- Create a global context using `createContext()`
- Build a Context Provider that shares global state and methods
- Use the `useContext()` hook to consume that state in child components
- Share the state (`count`) and the state updater function (`setCount()`) across components

---

üìÇ Project Files (Total 4):

1Ô∏è‚É£ `CounterComponent.jsx`  
> Main component that consumes and displays the global `count` state.

2Ô∏è‚É£ `Counter.jsx`  
> Contains two buttons to increment and decrement the global `count` using `setCount()`.

3Ô∏è‚É£ `Style.css`  
> Provides simple styling to make the UI a little more readable and presentable.

4Ô∏è‚É£ `CounterContext.jsx`  
> The file where:
   - `CounterContext` is created using `createContext()`
   - A provider component (`CounterProvider`) is built using `useState()`
   - This provider wraps around children to make `count` and `setCount()` globally accessible.

---

üß† Explanation:

This is a basic **Counter App** where the `count` state and `setCount()` function are managed globally using Context API.  

We‚Äôve wrapped our main component (`CounterComponent`) with the `CounterProvider`, so that any child inside can access and modify the global state using:

```js
const { count, setCount } = useContext(CounterContext);
```

üìù Main.jsx (Preserving this for future reference)

We are planning to remove this code later for other experiments, so saving it here:

? Imports
import CounterComponent from "../part-3/Components/CounterComponent";
import { CounterProvider } from "../part-3/context/counterContext.jsx";

? Render code
<StrictMode>
  <CounterProvider>
    <CounterComponent />
  </CounterProvider>
</StrictMode>

- This setup wraps the entire app inside the Context Provider so that global state is available throughout the component tree.